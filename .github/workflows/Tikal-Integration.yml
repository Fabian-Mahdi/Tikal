name: Tikal-Integration

on:
  push:
    paths:
      - .github/**
      - Tikal/**
      - Tikal.Tests/**
    branches:
      - master
      - feature/*

env:
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  format:
    name: Enforce formatting
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        dotnet-version: ["9.0.X"]
        project:
          [
            "Tikal/Tikal.App",
            "Tikal/Tikal.Application",
            "Tikal/Tikal.Domain",
            "Tikal/Tikal.Infrastructure",
            "Tikal/Tikal.Presentation",
            "Tikal.Tests/Tikal.Application.Tests",
            "Tikal.Tests/Tikal.Domain.Tests",
            "Tikal.Tests/Tikal.Integration",
          ]
      fail-fast: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup dotnet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
          cache: true
          cache-dependency-path: ./${{ matrix.project }}/packages.lock.json

      - name: Restore ${{ matrix.project }}
        run: dotnet restore ./${{ matrix.project }} --locked-mode

      - name: Enforce formatting for ${{ matrix.project }}
        run: dotnet format ./${{ matrix.project }} whitespace --verify-no-changes --no-restore

  unit-test:
    name: Run unit tests
    needs: format
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        dotnet-version: ["9.0.X"]
        project: ["Tikal.Application.Tests", "Tikal.Domain.Tests"]
      fail-fast: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup dotnet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
          cache: true
          cache-dependency-path: ./Tikal.Tests/${{ matrix.project }}/packages.lock.json

      - name: Restore ${{ matrix.project }}
        run: dotnet restore ./Tikal.Tests/${{ matrix.project }} --locked-mode

      - name: Build ${{ matrix.project }}
        run: dotnet build ./Tikal.Tests/${{ matrix.project }} --configuration Release --no-restore

      - name: Test ${{ matrix.project }}
        run: dotnet test ./Tikal.Tests/${{ matrix.project }} --collect:"XPlat Code Coverage" --configuration Release --no-build --results-directory "TestResults-${{ matrix.dotnet-version }}" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: Upload dotnet test results
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results-${{ matrix.dotnet-version }}-${{ matrix.project }}
          path: TestResults-${{ matrix.dotnet-version }}
        if: ${{ always() }}

  integration-test:
    name: Run integration tests
    needs: unit-test
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        dotnet-version: ["9.0.X"]
        project: ["Tikal.Integration"]
      fail-fast: false
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup dotnet ${{ matrix.dotnet-version }}
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet-version }}
          cache: true
          cache-dependency-path: ./Tikal.Tests/${{ matrix.project }}/packages.lock.json

      - name: Restore ${{ matrix.project }}
        run: dotnet restore ./Tikal.Tests/${{ matrix.project }} --locked-mode

      - name: Build ${{ matrix.project }}
        run: dotnet build ./Tikal.Tests/${{ matrix.project }} --configuration Release --no-restore

      - name: Test ${{ matrix.project }}
        run: dotnet test ./Tikal.Tests/${{ matrix.project }} --collect:"XPlat Code Coverage" --configuration Release --no-build --results-directory "TestResults-${{ matrix.dotnet-version }}" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: Upload dotnet test results
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results-${{ matrix.dotnet-version }}-${{ matrix.project }}
          path: TestResults-${{ matrix.dotnet-version }}
        if: ${{ always() }}

  sonar:
    name: Sonarqube scan
    needs: integration-test
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: "zulu"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarQube Cloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('./Tikal.Tests/Integration/package.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Install SonarQube Cloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

      - name: Begin SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.TIKAL_SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"fmahdi09_tikal" /o:"fmahdi09" /d:sonar.token="${{ secrets.TIKAL_SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.scanner.scanAll=false /d:sonar.cs.opencover.reportsPaths=./TestResults/**/coverage.opencover.xml

      - name: Build Projects
        shell: powershell
        run: |
          dotnet build .\Tikal\Tikal.Domain
          dotnet build .\Tikal\Tikal.Application
          dotnet build .\Tikal\Tikal.Infrastructure
          dotnet build .\Tikal\Tikal.Presentation
          dotnet build .\Tikal\Tikal.App
          dotnet build .\Tikal.Tests\Tikal.Domain.Tests
          dotnet build .\Tikal.Tests\Tikal.Application.Tests
          dotnet build .\Tikal.Tests\Tikal.Integration

      - uses: actions/download-artifact@v5
        with:
          path: ./TestResults
          merge-multiple: true
      - name: Display structure of downloaded files
        run: ls -R ./TestResults

      - name: End SonarQube Analysis
        env:
          SONAR_TOKEN: ${{ secrets.TIKAL_SONAR_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.TIKAL_SONAR_TOKEN }}"
